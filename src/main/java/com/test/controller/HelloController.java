package com.test.controller;import com.test.bean.Greeting;import com.test.jwtUtil.JwtUtil;import com.test.models.AuthenticationRequest;import com.test.models.AuthenticationResponse;import com.test.services.MyUserDetailService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.web.bind.annotation.*;@RestControllerpublic class HelloController {    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private MyUserDetailService myUserDetailService;    @Autowired    private JwtUtil jwtUtil;    @RequestMapping("/greeting")    public String helloGreetingMethod() {        return "hello tarik";    }    @RequestMapping("/hello/{name}")    public String helloControllerMethod(@PathVariable String name) {        return "hello " + name;    }    @RequestMapping("/hello2")    public String hello2ControllerMethod(@RequestParam String name) {        return "welcome " + name;    }    @RequestMapping("/greetingJson")    public Greeting helloGreetingJsonMethod() {        return new Greeting("hello world", "xxx");    }    @GetMapping("/headandshoulders")    public ResponseEntity<Greeting> usingResponseEntityBuilderAndHttpHeaders() {        HttpHeaders responseHeaders = new HttpHeaders();        responseHeaders.set("user-id",                "murat");        return ResponseEntity.ok()                .headers(responseHeaders)                .body(new Greeting("hello world", "xxx"));    }    @RequestMapping(value = "/authentication", method = RequestMethod.POST)    public ResponseEntity<?> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest) throws Exception {        try {            authenticationManager.authenticate(                    new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(), authenticationRequest.getPassword())            );        } catch (BadCredentialsException badCred) {            throw new Exception("Wrong username", badCred);        }        final UserDetails userDetails = myUserDetailService.loadUserByUsername(authenticationRequest.getUsername());        final String jwt = jwtUtil.generateToken(userDetails);        return ResponseEntity.ok(new AuthenticationResponse(jwt));    }}